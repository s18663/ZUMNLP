# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ClleW7d7mQiKVz7mc3-KendJsWguzvxf

dataset source: https://stonybrooknlp.github.io/PerSenT/
"""

!wget https://raw.githubusercontent.com/MHDBST/PerSenT/main/train.csv
!wget https://raw.githubusercontent.com/MHDBST/PerSenT/main/random_test.csv

!pip install -U spacy
!python -m spacy download en_core_web_md

import re
import logging
import matplotlib.pyplot as P
import numpy as np
import pandas as pd
import spacy
from tqdm import tqdm
tqdm.pandas()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report

from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.naive_bayes import BernoulliNB

df = pd.read_csv('train.csv')

dfT = pd.read_csv('random_test.csv')

data = df[['TRUE_SENTIMENT','DOCUMENT']]

data['TRUE_SENTIMENT'].replace('Negative',0,inplace=True)
data['TRUE_SENTIMENT'].replace('Neutral',1,inplace=True)
data['TRUE_SENTIMENT'].replace('Positive',2,inplace=True)

data['DOCUMENT'] = data['DOCUMENT'].apply(lambda x:x.lower())

character_re = re.compile(r"[^a-z\s']")
data['DOCUMENT'] = data['DOCUMENT'].apply(lambda x:character_re.sub('',x))

nlp = spacy.load(
    'en_core_web_md', disable=['ner','parser'])
nlp.add_pipe('sentencizer')

def remove_stopwords(text):
  return ' '.join(filter(lambda x: x not in nlp.Defaults.stop_words,text.split()))

data['DOCUMENT'].apply(remove_stopwords)

a = data[data['TRUE_SENTIMENT']==0]
b = data[data['TRUE_SENTIMENT']==1]
c = data[data['TRUE_SENTIMENT']==2]

dataAll = pd.concat([a,b,c])

def lemmatize(text):
  return ' '.join([x.lemma_ for x in nlp(text)])

dataAll['DOCUMENT'] = dataAll['DOCUMENT'].progress_apply(lemmatize)

X_train, X_test, y_train, y_test = train_test_split(dataAll.DOCUMENT,dataAll.TRUE_SENTIMENT,test_size=0.1,stratify=dataAll.TRUE_SENTIMENT,random_state=42)

vectorizer = TfidfVectorizer(max_features=500000, ngram_range=(1,2))
vectorizer.fit(X_train)

X_train = vectorizer.transform(X_train)
X_test = vectorizer.transform(X_test)

"""modele (BernoulliNB (chciałam zrobic na Gaussian ale były problemy z danymi z jakiegoś powodu), SVC i Logistic Regression)"""

model1 = GaussianNB()
model2 = LogisticRegression()
model3 = SVC(probability=True)
modela = BernoulliNB()

modela.fit(X_train,y_train)
model2.fit(X_train,y_train)
model3.fit(X_train,y_train)

y_pred = modela.predict(X_test)
print(classification_report(y_test,y_pred))
pd.DataFrame(confusion_matrix(y_test, y_pred), 
             columns=['Predicted Negative','Predicted Neutral' ,'Predicted Positive'], 
             index=['Actual Negative','Actual Neutral', 'Actual Positive'])

def plot_roc_curve(fpr, tpr):
    P.plot(fpr, tpr, color='orange', label='ROC')
    P.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
    P.xlabel('False Positive Rate')
    P.ylabel('True Positive Rate')
    P.title('Receiver Operating Characteristic (ROC) Curve')
    P.legend()
    P.show()

from sklearn.metrics import roc_auc_score, roc_curve

probs = modela.predict_proba(X_test)
probs = probs[:, 1]


fpr, tpr, thresholds = roc_curve(y_test, probs,pos_label=2)
plot_roc_curve(fpr, tpr)

y_pred2 = model2.predict(X_test)
print(classification_report(y_test,y_pred2))
pd.DataFrame(confusion_matrix(y_test, y_pred), 
             columns=['Predicted Negative','Predicted Neutral' ,'Predicted Positive'], 
             index=['Actual Negative','Actual Neutral', 'Actual Positive'])

from sklearn.metrics import roc_auc_score, roc_curve

probs = model2.predict_proba(X_test)
probs = probs[:, 1]


fpr, tpr, thresholds = roc_curve(y_test, probs,pos_label=2)
plot_roc_curve(fpr, tpr)

y_pred3 = model3.predict(X_test)
print(classification_report(y_test,y_pred3))
pd.DataFrame(confusion_matrix(y_test, y_pred), 
             columns=['Predicted Negative','Predicted Neutral' ,'Predicted Positive'], 
             index=['Actual Negative','Actual Neutral', 'Actual Positive'])

from sklearn.metrics import roc_auc_score, roc_curve

probs = model3.predict_proba(X_test)
probs = probs[:, 1]


fpr, tpr, thresholds = roc_curve(y_test, probs,pos_label=2)
plot_roc_curve(fpr, tpr)

"""Logistic Regression dało lepsze wyniki od pozostałych modeli."""

import pickle

filename1 = 'Bernoulli.model'
pickle.dump(modela, open(filename1, 'wb'))
filename2 = 'LogisticRegr.model'
pickle.dump(model2, open(filename2, 'wb'))
filename3 = 'SVC.model'
pickle.dump(model3, open(filename3, 'wb'))